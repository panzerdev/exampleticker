// Code generated by protoc-gen-go. DO NOT EDIT.
// source: url_ticker.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	url_ticker.proto

It has these top-level messages:
	UrlRequest
	LinkTitlesResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UrlRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *UrlRequest) Reset()                    { *m = UrlRequest{} }
func (m *UrlRequest) String() string            { return proto.CompactTextString(m) }
func (*UrlRequest) ProtoMessage()               {}
func (*UrlRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UrlRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type LinkTitlesResponse struct {
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Topic string `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
}

func (m *LinkTitlesResponse) Reset()                    { *m = LinkTitlesResponse{} }
func (m *LinkTitlesResponse) String() string            { return proto.CompactTextString(m) }
func (*LinkTitlesResponse) ProtoMessage()               {}
func (*LinkTitlesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LinkTitlesResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *LinkTitlesResponse) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func init() {
	proto.RegisterType((*UrlRequest)(nil), "UrlRequest")
	proto.RegisterType((*LinkTitlesResponse)(nil), "LinkTitlesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UrlTicker service

type UrlTickerClient interface {
	StreamTitles(ctx context.Context, opts ...grpc.CallOption) (UrlTicker_StreamTitlesClient, error)
}

type urlTickerClient struct {
	cc *grpc.ClientConn
}

func NewUrlTickerClient(cc *grpc.ClientConn) UrlTickerClient {
	return &urlTickerClient{cc}
}

func (c *urlTickerClient) StreamTitles(ctx context.Context, opts ...grpc.CallOption) (UrlTicker_StreamTitlesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UrlTicker_serviceDesc.Streams[0], c.cc, "/UrlTicker/StreamTitles", opts...)
	if err != nil {
		return nil, err
	}
	x := &urlTickerStreamTitlesClient{stream}
	return x, nil
}

type UrlTicker_StreamTitlesClient interface {
	Send(*UrlRequest) error
	Recv() (*LinkTitlesResponse, error)
	grpc.ClientStream
}

type urlTickerStreamTitlesClient struct {
	grpc.ClientStream
}

func (x *urlTickerStreamTitlesClient) Send(m *UrlRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *urlTickerStreamTitlesClient) Recv() (*LinkTitlesResponse, error) {
	m := new(LinkTitlesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UrlTicker service

type UrlTickerServer interface {
	StreamTitles(UrlTicker_StreamTitlesServer) error
}

func RegisterUrlTickerServer(s *grpc.Server, srv UrlTickerServer) {
	s.RegisterService(&_UrlTicker_serviceDesc, srv)
}

func _UrlTicker_StreamTitles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UrlTickerServer).StreamTitles(&urlTickerStreamTitlesServer{stream})
}

type UrlTicker_StreamTitlesServer interface {
	Send(*LinkTitlesResponse) error
	Recv() (*UrlRequest, error)
	grpc.ServerStream
}

type urlTickerStreamTitlesServer struct {
	grpc.ServerStream
}

func (x *urlTickerStreamTitlesServer) Send(m *LinkTitlesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *urlTickerStreamTitlesServer) Recv() (*UrlRequest, error) {
	m := new(UrlRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UrlTicker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UrlTicker",
	HandlerType: (*UrlTickerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTitles",
			Handler:       _UrlTicker_StreamTitles_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "url_ticker.proto",
}

func init() { proto.RegisterFile("url_ticker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0xb1, 0x4b, 0xc4, 0x30,
	0x14, 0x87, 0x4d, 0x41, 0xb1, 0x4f, 0x05, 0x89, 0x0e, 0xa5, 0x8b, 0xd2, 0xa9, 0x53, 0x10, 0x85,
	0xce, 0x52, 0x57, 0xc1, 0x52, 0xdb, 0xc5, 0x45, 0xda, 0xf2, 0x38, 0x42, 0xd3, 0x26, 0xf7, 0x92,
	0xc0, 0xfd, 0xf9, 0x47, 0xda, 0x72, 0x37, 0xdc, 0xf8, 0x7d, 0x84, 0xfc, 0xde, 0x07, 0x8f, 0x9e,
	0xd4, 0xbf, 0x93, 0xc3, 0x88, 0x24, 0x0c, 0x69, 0xa7, 0xb3, 0x1c, 0xa0, 0x25, 0x55, 0xe3, 0xde,
	0xa3, 0x75, 0x3c, 0x85, 0x5b, 0x6f, 0x91, 0xe6, 0x6e, 0xc2, 0x84, 0xbd, 0xb2, 0x3c, 0xae, 0x4f,
	0x9c, 0x7d, 0x02, 0xff, 0x96, 0xf3, 0xd8, 0x48, 0xa7, 0xd0, 0xd6, 0x68, 0x8d, 0x9e, 0x2d, 0xf2,
	0x67, 0xb8, 0x76, 0xc1, 0x6c, 0xcf, 0x57, 0x58, 0xac, 0x36, 0x72, 0x48, 0xa2, 0xcd, 0x06, 0x78,
	0xff, 0x82, 0xb8, 0x25, 0xd5, 0x2c, 0xf3, 0xbc, 0x80, 0xfb, 0x5f, 0x47, 0xd8, 0x4d, 0xeb, 0x87,
	0xfc, 0x4e, 0x9c, 0xef, 0x48, 0x9f, 0xc4, 0xe5, 0x54, 0x76, 0x95, 0xb3, 0x37, 0x56, 0x16, 0xf0,
	0x22, 0xb5, 0xd8, 0x91, 0x19, 0x04, 0x1e, 0xba, 0xc9, 0x28, 0xb4, 0xc2, 0x93, 0xda, 0xa2, 0x82,
	0x2f, 0x1f, 0x5a, 0x52, 0x3f, 0xde, 0x21, 0x55, 0x21, 0xb1, 0x62, 0x7f, 0x91, 0xe9, 0xfb, 0x9b,
	0xa5, 0xf7, 0xe3, 0x18, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x6b, 0xc3, 0xba, 0x03, 0x01, 0x00, 0x00,
}
